/**
 * Configura√ß√£o Detalhada do Banco de Dados para API de Plantas
 *
 * Este script realiza tr√™s opera√ß√µes principais:
 * 1. Criar o banco de dados SQLite se n√£o existir
 * 2. Criar as tabelas, √≠ndices, views e triggers necess√°rios
 * 3. Adicionar tipos de plantas b√°sicos se o banco estiver vazio
 *
 * Cada etapa √© explicada em detalhes com logs extensos para acompanhamento.
 */

import sqlite3 from 'sqlite3';
import path from 'path';
import fs from 'fs';

// Ativar modo verbose para ter mais logs do SQLite
sqlite3.verbose();

console.log('====================================================================');
console.log('INICIANDO CONFIGURA√á√ÉO DO BANCO DE DADOS DA API DE PLANTAS');
console.log('====================================================================');

// ==================== 1. CRIAR O BANCO DE DADOS SQLITE SE N√ÉO EXISTIR ====================

console.log('\n\n--- ETAPA 1: VERIFICA√á√ÉO E CRIA√á√ÉO DO BANCO DE DADOS ---\n');

// Primeiro, definimos o diret√≥rio onde o banco de dados ser√° armazenado
const dbDir = path.resolve(__dirname, './db');
console.log(`Verificando exist√™ncia do diret√≥rio: ${dbDir}`);

// Verificamos se o diret√≥rio existe
if (!fs.existsSync(dbDir)) {
    console.log(`Diret√≥rio n√£o encontrado. Criando diret√≥rio: ${dbDir}`);

    try {
        // Criamos o diret√≥rio com a op√ß√£o recursive para criar diret√≥rios pai se necess√°rio
        fs.mkdirSync(dbDir, { recursive: true });
        console.log(`‚úÖ Diret√≥rio ${dbDir} criado com sucesso.`);
    } catch (err) {
        console.error(`‚ùå Erro ao criar diret√≥rio: ${err}`);
        process.exit(1); // Sa√≠mos do processo em caso de erro
    }
} else {
    console.log(`‚úÖ Diret√≥rio ${dbDir} j√° existe.`);
}

// Agora, definimos o caminho completo para o arquivo do banco de dados
const dbPath = path.resolve(dbDir, 'plantas.db');
console.log(`Caminho do arquivo do banco de dados: ${dbPath}`);

// Verificamos se o arquivo do banco de dados j√° existe
if (fs.existsSync(dbPath)) {
    console.log(`O arquivo do banco de dados j√° existe em: ${dbPath}`);
    const stats = fs.statSync(dbPath);
    console.log(`Tamanho do arquivo: ${(stats.size / 1024).toFixed(2)} KB`);
    console.log(`√öltima modifica√ß√£o: ${stats.mtime}`);
} else {
    console.log(`O arquivo do banco de dados n√£o existe e ser√° criado: ${dbPath}`);
}

// Criamos a conex√£o com o banco de dados
console.log('Estabelecendo conex√£o com o banco de dados SQLite...');
let db: sqlite3.Database;

try {
    db = new sqlite3.Database(dbPath, (err) => {
        if (err) {
            console.error(`‚ùå ERRO ao conectar com o banco de dados: ${err.message}`);
            process.exit(1);
        } else {
            console.log('‚úÖ Conex√£o com o banco de dados estabelecida com sucesso!');
            console.log(`üìù SQLite vers√£o: ${sqlite3.version}`);

            // Verificamos o modo de execu√ß√£o
            db.get("PRAGMA journal_mode;", (err, row) => {
                if (err) {
                    console.error(`‚ùå Erro ao verificar journal_mode: ${err.message}`);
                } else {
                    console.log(`SQLite journal_mode: ${row.journal_mode}`);
                }
            });

            // Agora que conectamos com sucesso, iniciamos a segunda etapa
            inicializarEsquemaBancoDados();
        }
    });
} catch (err) {
    console.error(`‚ùå Exce√ß√£o ao criar conex√£o com o banco de dados: ${err}`);
    process.exit(1);
}

// ==================== 2. CRIAR TABELAS, √çNDICES, VIEWS E TRIGGERS ====================

function inicializarEsquemaBancoDados() {
    console.log('\n\n--- ETAPA 2: CRIA√á√ÉO DE TABELAS, √çNDICES, VIEWS E TRIGGERS ---\n');

    // Ativamos o modo de chave estrangeira para garantir integridade referencial
    db.run('PRAGMA foreign_keys = ON;', function(err) {
        if (err) {
            console.error(`‚ùå Erro ao ativar foreign_keys: ${err.message}`);
        } else {
            console.log('‚úÖ Modo foreign_keys ativado com sucesso.');
        }
    });

    console.log('Criando tabelas se n√£o existirem...');

    // Definimos as opera√ß√µes SQL como etapas separadas para facilitar o debug
    const steps = [
        // Etapa 1: Criar tabela tipos_planta
        {
            name: "Tabela tipos_planta",
            sql: `
        CREATE TABLE IF NOT EXISTS tipos_planta (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          nome VARCHAR(100) NOT NULL,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
      `
        },

        // Etapa 2: Criar tabela plantas
        {
            name: "Tabela plantas",
            sql: `
        CREATE TABLE IF NOT EXISTS plantas (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          nome VARCHAR(100) NOT NULL,
          subtitulo VARCHAR(200) NOT NULL,
          etiquetas TEXT NOT NULL,
          preco DECIMAL(10,2) NOT NULL,
          esta_em_promocao BOOLEAN DEFAULT FALSE,
          porcentagem_desconto DECIMAL(5,2),
          caracteristicas TEXT NOT NULL,
          descricao TEXT NOT NULL,
          url_imagem VARCHAR(255) NOT NULL,
          tipo_planta_id INTEGER NOT NULL,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          FOREIGN KEY (tipo_planta_id) REFERENCES tipos_planta(id) ON DELETE CASCADE
        );
      `
        },

        // Etapa 3: Criar trigger para tipos_planta
        {
            name: "Trigger para tipos_planta",
            sql: `
        CREATE TRIGGER IF NOT EXISTS tipos_planta_updated_at
        AFTER UPDATE ON tipos_planta
        FOR EACH ROW
        BEGIN
          UPDATE tipos_planta 
          SET updated_at = CURRENT_TIMESTAMP 
          WHERE id = old.id;
        END;
      `
        },

        // Etapa 4: Criar trigger para plantas
        {
            name: "Trigger para plantas",
            sql: `
        CREATE TRIGGER IF NOT EXISTS plantas_updated_at
        AFTER UPDATE ON plantas
        FOR EACH ROW
        BEGIN
          UPDATE plantas 
          SET updated_at = CURRENT_TIMESTAMP 
          WHERE id = old.id;
        END;
      `
        },

        // Etapa 5: Criar √≠ndices para melhor performance
        {
            name: "√çndice para tipo_planta_id",
            sql: `CREATE INDEX IF NOT EXISTS idx_plantas_tipo_planta_id ON plantas(tipo_planta_id);`
        },
        {
            name: "√çndice para esta_em_promocao",
            sql: `CREATE INDEX IF NOT EXISTS idx_plantas_esta_em_promocao ON plantas(esta_em_promocao);`
        },
        {
            name: "√çndice para preco",
            sql: `CREATE INDEX IF NOT EXISTS idx_plantas_preco ON plantas(preco);`
        },

        // Etapa 6: Criar views
        {
            name: "View para plantas em promo√ß√£o",
            sql: `
        CREATE VIEW IF NOT EXISTS view_plantas_promocao AS
        SELECT 
          p.*,
          tp.nome as tipo_planta_nome,
          ROUND(p.preco * (1 - p.porcentagem_desconto/100), 2) as preco_promocional
        FROM plantas p
        JOIN tipos_planta tp ON p.tipo_planta_id = tp.id
        WHERE p.esta_em_promocao = true;
      `
        },
        {
            name: "View para relat√≥rio de plantas por tipo",
            sql: `
        CREATE VIEW IF NOT EXISTS view_relatorio_plantas_por_tipo AS
        SELECT 
          tp.nome as tipo_planta,
          COUNT(*) as quantidade_plantas,
          ROUND(AVG(p.preco), 2) as preco_medio,
          COUNT(CASE WHEN p.esta_em_promocao THEN 1 END) as quantidade_em_promocao
        FROM tipos_planta tp
        LEFT JOIN plantas p ON tp.id = p.tipo_planta_id
        GROUP BY tp.id, tp.nome;
      `
        }
    ];

    // Fun√ß√£o para executar as etapas sequencialmente
    function executarEtapas(index = 0) {
        if (index >= steps.length) {
            console.log('‚úÖ Todas as estruturas do banco de dados foram criadas com sucesso!');

            // Ap√≥s criar todas as estruturas, verificamos se elas existem
            verificarEstruturas(() => {
                // Depois de verificar, seguimos para a pr√≥xima etapa
                popularDadosIniciais();
            });
            return;
        }

        const step = steps[index];
        console.log(`Executando: ${step.name}...`);

        db.exec(step.sql, function(err) {
            if (err) {
                console.error(`‚ùå Erro ao criar ${step.name}: ${err.message}`);
            } else {
                console.log(`‚úÖ ${step.name} criado/atualizado com sucesso.`);
            }

            // Executar a pr√≥xima etapa
            executarEtapas(index + 1);
        });
    }

    // Iniciar a execu√ß√£o das etapas
    executarEtapas();
}

// Fun√ß√£o para verificar se as estruturas foram realmente criadas
function verificarEstruturas(callback: () => void) {
    console.log('\nVerificando estruturas criadas no banco de dados...');

    // Verificar tabelas
    db.all("SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%';", (err, tables) => {
        if (err) {
            console.error(`‚ùå Erro ao verificar tabelas: ${err.message}`);
        } else {
            console.log('\nTabelas existentes:');
            tables.forEach(table => console.log(`- ${table.name}`));
        }

        // Verificar √≠ndices
        db.all("SELECT name FROM sqlite_master WHERE type='index' AND name NOT LIKE 'sqlite_%';", (err, indices) => {
            if (err) {
                console.error(`‚ùå Erro ao verificar √≠ndices: ${err.message}`);
            } else {
                console.log('\n√çndices existentes:');
                indices.forEach(index => console.log(`- ${index.name}`));
            }

            // Verificar views
            db.all("SELECT name FROM sqlite_master WHERE type='view';", (err, views) => {
                if (err) {
                    console.error(`‚ùå Erro ao verificar views: ${err.message}`);
                } else {
                    console.log('\nViews existentes:');
                    views.forEach(view => console.log(`- ${view.name}`));
                }

                // Verificar triggers
                db.all("SELECT name FROM sqlite_master WHERE type='trigger';", (err, triggers) => {
                    if (err) {
                        console.error(`‚ùå Erro ao verificar triggers: ${err.message}`);
                    } else {
                        console.log('\nTriggers existentes:');
                        triggers.forEach(trigger => console.log(`- ${trigger.name}`));
                    }

                    // Continuar para a pr√≥xima etapa
                    callback();
                });
            });
        });
    });
}

// ==================== 3. ADICIONAR TIPOS DE PLANTAS B√ÅSICOS SE O BANCO ESTIVER VAZIO ====================

function popularDadosIniciais() {
    console.log('\n\n--- ETAPA 3: POPULANDO DADOS INICIAIS ---\n');

    console.log('Verificando se a tabela tipos_planta est√° vazia...');

    // Verificamos se j√° existem tipos de plantas
    db.get('SELECT COUNT(*) as count FROM tipos_planta', [], (err, row: any) => {
        if (err) {
            console.error(`‚ùå Erro ao verificar contagem de tipos_planta: ${err.message}`);
            return;
        }

        console.log(`N√∫mero de tipos de plantas existentes: ${row.count}`);

        // Se n√£o houver tipos de plantas, adicionamos os b√°sicos
        if (row.count === 0) {
            console.log('üå± Tabela tipos_planta est√° vazia. Adicionando tipos de plantas iniciais...');

            // Lista de tipos de plantas b√°sicos para adicionar
            const tiposPlantas = [
                { nome: 'Plantas de Interior' },
                { nome: 'Plantas de Exterior' },
                { nome: 'Suculentas' },
                { nome: 'Cactos' },
                { nome: '√Årvores Frut√≠feras' },
                { nome: 'Flores' },
                { nome: 'Ervas Arom√°ticas' }
            ];

            console.log('Tipos de plantas a serem adicionados:');
            tiposPlantas.forEach((tipo, index) => {
                console.log(`${index + 1}. ${tipo.nome}`);
            });

            // Iniciamos uma transa√ß√£o para garantir que todas as inser√ß√µes sejam conclu√≠das juntas
            db.run('BEGIN TRANSACTION', function(err) {
                if (err) {
                    console.error(`‚ùå Erro ao iniciar transa√ß√£o: ${err.message}`);
                    return;
                }

                console.log('Transa√ß√£o iniciada. Inserindo tipos de plantas...');

                // Contadores para acompanhamento
                let inseridos = 0;
                let falhas = 0;

                // Preparamos a statement para inser√ß√£o
                const stmt = db.prepare('INSERT INTO tipos_planta (nome) VALUES (?)');

                // Para cada tipo de planta...
                tiposPlantas.forEach((tipo, index) => {
                    // Inserimos no banco de dados
                    stmt.run([tipo.nome], function(err) {
                        if (err) {
                            console.error(`‚ùå Erro ao inserir tipo de planta "${tipo.nome}": ${err.message}`);
                            falhas++;
                        } else {
                            console.log(`‚úÖ Tipo de planta "${tipo.nome}" inserido com ID: ${this.lastID}`);
                            inseridos++;
                        }

                        // Se esta foi a √∫ltima inser√ß√£o
                        if (index === tiposPlantas.length - 1) {
                            // Finalizamos a statement
                            stmt.finalize((err) => {
                                if (err) {
                                    console.error(`‚ùå Erro ao finalizar statement: ${err.message}`);
                                    db.run('ROLLBACK', () => {
                                        console.log('Rollback da transa√ß√£o realizado devido a erro.');
                                    });
                                    return;
                                }

                                // Commit da transa√ß√£o
                                db.run('COMMIT', function(err) {
                                    if (err) {
                                        console.error(`‚ùå Erro ao commitar transa√ß√£o: ${err.message}`);
                                        db.run('ROLLBACK', () => {
                                            console.log('Rollback da transa√ß√£o realizado devido a erro no commit.');
                                        });
                                        return;
                                    }

                                    console.log(`\n‚úÖ Transa√ß√£o completada com sucesso!`);
                                    console.log(`üìä Estat√≠sticas: ${inseridos} tipos de plantas inseridos, ${falhas} falhas.`);

                                    // Exibimos os tipos de plantas inseridos
                                    db.all('SELECT * FROM tipos_planta ORDER BY id', [], (err, rows) => {
                                        if (err) {
                                            console.error(`‚ùå Erro ao consultar tipos de plantas: ${err.message}`);
                                        } else {
                                            console.log('\nTipos de plantas agora no banco:');
                                            console.table(rows);
                                            console.log('====================================================================');
                                            console.log('CONFIGURA√á√ÉO DO BANCO DE DADOS CONCLU√çDA COM SUCESSO! üéâ');
                                            console.log('====================================================================');
                                        }

                                        // Fechamos a conex√£o com o banco de dados
                                        fecharConexao();
                                    });
                                });
                            });
                        }
                    });
                });
            });
        } else {
            console.log(`‚úÖ A tabela tipos_planta j√° cont√©m dados (${row.count} registros). N√£o √© necess√°rio adicionar dados iniciais.`);

            // Exibimos os tipos de plantas existentes
            db.all('SELECT * FROM tipos_planta ORDER BY id', [], (err, rows) => {
                if (err) {
                    console.error(`‚ùå Erro ao consultar tipos de plantas: ${err.message}`);
                } else {
                    console.log('\nTipos de plantas existentes no banco:');
                    console.table(rows);
                    console.log('====================================================================');
                    console.log('CONFIGURA√á√ÉO DO BANCO DE DADOS CONCLU√çDA! üéâ');
                    console.log('====================================================================');
                }

                // Fechamos a conex√£o com o banco de dados
                fecharConexao();
            });
        }
    });
}

// Fun√ß√£o para fechar a conex√£o com o banco de dados
function fecharConexao() {
    console.log('\nFechando conex√£o com o banco de dados...');
    db.close((err) => {
        if (err) {
            console.error(`‚ùå Erro ao fechar banco de dados: ${err.message}`);
        } else {
            console.log('‚úÖ Conex√£o com o banco de dados fechada com sucesso.');
        }

        // Imprime a √∫ltima mensagem do script
        console.log('\nüìù Script de configura√ß√£o do banco de dados finalizado! O banco est√° pronto para uso pela API.');
    });
}

// Executamos o script diretamente
if (require.main === module) {
    console.log('Script sendo executado diretamente.');
    // O fluxo principal j√° √© iniciado na conex√£o com o banco
}

// Exportamos o banco de dados para poss√≠vel uso em outros m√≥dulos
export default db;